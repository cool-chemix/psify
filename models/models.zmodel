

model Sponsor {

    id                String        @id @default(uuid())  
    name            String?          
    type            String?          
    contactEmail  String?          
    contributionAmount  String?          
    renewalDate  String?          
    status        String?          

createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model InstallmentPlan {

    id                String        @id @default(uuid())  
    totalAmount  String?          
    numberOfInstallments  Float?            
    frequency  String?          
    startDate  String?          

userId        String?          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
 
    payments    Payment[]  @relation("installmentPlan")  
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Event {

    id                String        @id @default(uuid())  
    name            String?          
    description  String?          
    date            String?          
    budget        String?          
    cost            String?          
    status        String?          

organizerId  String?          
    organizer  User?            @relation(fields: [organizerId], references: [id], name:"organizer")  
 
    eventRegistrations  EventRegistration[]  @relation("event")  
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model FundraisingCampaign {

    id                String        @id @default(uuid())  
    name            String?          
    description  String?          
    goal            String?          
    currentAmount  String          
    startDate  String?          
    endDate      String?          
    status        String?          

createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model MemberRole {

    id                String        @id @default(uuid())  
    role            String?          

userId        String?          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
    assignedById  String?          
    assignedBy  User?            @relation(fields: [assignedById], references: [id], name:"assignedBy")  
 
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Payment {

    id                String        @id @default(uuid())  
    amount        String?          
    status        String?          
    type            String?          
    dueDate      String?          
    paymentMethod  String?          

userId        String?          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
    installmentPlanId  String?          
    installmentPlan  InstallmentPlan?  @relation(fields: [installmentPlanId], references: [id], name:"installmentPlan")  
 
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model EventRegistration {

    id                String        @id @default(uuid())  
    amountPaid  String?          

eventId      String?          
    event          Event?          @relation(fields: [eventId], references: [id], name:"event")  
    userId        String?          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
    splitWithId  String?          
    splitWith  User?            @relation(fields: [splitWithId], references: [id], name:"splitWith")  
 
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model ExpenseRequest {

    id                String        @id @default(uuid())  
    amount        String?          
    description  String?          
    category    String?          
    receiptUrl  String?          
    status        String?          

userId        String?          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
    approvedById  String?          
    approvedBy  User?            @relation(fields: [approvedById], references: [id], name:"approvedBy")  
 
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Transaction {

    id                String        @id @default(uuid())  
    amount        String?          
    type            String?          
    status        String?          
    reference  String?          

userId        String?          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
 
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                String             @id @default(uuid())
    name              String?
    email             String?            @unique
    pictureUrl        String?            @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation   String?
    emailVerified     Boolean?
    
    status            UserStatus         @default(VERIFIED)

    // this is the role of the user for the application
    globalRole        String             @default('USER')
    password          String?            @password @omit
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt @default(now())
    accounts          Account[]
    sessions          Session[]

installmentPlans  InstallmentPlan[]  @relation("user")  
        eventsAsOrganizer  Event[]      @relation("organizer")  
        memberRoles  MemberRole[]  @relation("user")  
        memberRolesAsAssignedBy  MemberRole[]  @relation("assignedBy")  
        payments    Payment[]  @relation("user")  
        eventRegistrations  EventRegistration[]  @relation("user")  
        eventRegistrationsAsSplitWith  EventRegistration[]  @relation("splitWith")  
        expenseRequests  ExpenseRequest[]  @relation("user")  
        expenseRequestsAsApprovedBy  ExpenseRequest[]  @relation("approvedBy")  
        transactions  Transaction[]  @relation("user")  

@@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])

    @@allow("all", auth().id == user.id)
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@allow("all", auth().id == user.id)
}
